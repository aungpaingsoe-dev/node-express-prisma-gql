// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String    @unique
  password     String
  posts        Post[]
  profile      Profile   @relation(fields: [profileId], references: [id])
  profileId    String    @unique @db.ObjectId
  comments     Comment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  follower     User[]    @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds  String[]  @db.ObjectId
  following    User[]    @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds String[]  @db.ObjectId
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  dob    String?
  bio    String?
  gender Gender?
  phone  String?
  avatar String?
  user   User?
}

enum Gender {
  male
  female
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String? @db.ObjectId
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  content String
}
